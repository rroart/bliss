module f1 (main=r)=
begin

require 'myreq.r32';

routine diff (x,y)=x-y;

structure myvector[i; n, unit, ext] =
[n*unit]
(myvector+i*unit)<0,8*unit>;

own i;

structure
mybitvector[i; n] =
[(n+7)/8]
mybitvector<i,1>;

structure mydda[i;n]=
[(n+1)/2]
mydda<4*i,4>;

structure
block_byte[o,p,s,e; bs] =
[bs]
(block_byte + o)<p,s>;

structure
block[o,p,s; bs, unit] =
[bs*unit]
(block + o*unit)<p,s>;

structure
blockvector[i, o, p, s; n, bs, unit] =
[n*bs*unit]
(blockvector+(i*bs+o)*unit)<p,s>;

own def : myvector[15,4];
own def2 : myvector[15,4];
own abit : mybitvector[77];
own adda : mydda[4];
own ablock : block[8,4];

routine dummy2=
begin
own aloc;
own locdef : myvector[15,4];
!own def : myvector[5,4];
own data,data2;
external routine undecl;
tester=2;
(def+1)<0,32>=1;
def[1]=3;
(locdef+1)<0,32>=1;
locdef[1]=3;
undecl(52,.locdef);
undecl(53,.(locdef+1));
data=1;
data2=.data<3,3>;
!20000<8,8>=64;
!20008=77;
undecl(def,.def);
undecl(data,.data);
data+0=15;
!20000<7,49>=32<3,3>;
(data+1)=16;
(data+1)<3,3>=3;
def[3]=77;
(1+data+1)<3,3>=16;
data+2=17;
undecl(data,.data);
undecl(data+1,.(data+1));
undecl(data+2,.(data+2));
!20001+7=77;
def=129;
undecl(129,.def);
def<3,3>=7;
undecl(129,.def);
def[3]=77;
data=.def<0,8>;
data=.def[0];
undecl(data,.data);
abit=0;
abit+1=0;
abit[67]=1;
undecl(.abit,.(abit+1));
undecl(.(abit+2),.(abit+3));
undecl(256,256);
adda=0;
adda+1=0;
adda[2]=4;
undecl(.adda,.(adda+1));
ablock=0;
ablock+1=0;
undecl(.ablock,.(ablock+1));
ablock[0,2,3]=2;
undecl(.ablock,.(ablock+1));
end;
own dd;
routine dummy=
begin
!external routine pppp;
own def;
own xyz;
own abc;
def=1;
xyz=1;
abc=3;
!pppp(2,abc);
!xyz+1=2;
!136000=3;
!.136000=3;
end;

routine zzzz=
begin
!own mybyte: byte;
!own myword: word;
external routine undecl;
!mybyte=4;
!myword=3333;
!mybyte=.myword;
!undecl(.mybyte,.myword);
undecl(65535,1);
end;

routine pppp(par1, par2)=
begin
external routine undecl;
external routine retval2;
own myown;
undecl(64,96);
undecl(par1, par2);
undecl(.par1,.par2+.par1);
!par2=3;
myown=par1<16,8>;
undecl(par1, .myown);
undecl(64,97+1);
retval2();
end;

!routine q=3;
routine r=
begin
external routine undecl;
own a,b,c,d,e;
a=0;
b=3;
undecl(130,130);

e=(if .dd eql 4 then 20 else 30);
!undecl(e,.e);

if .a eql 0 then dd=8;
if .a eql 0 then ( own a; a=3; 7);
if .a then ( own a; a=3; 7);
if .a eql 1 then ( undecl (43,44); );
if .a eql 0 then ( undecl (43,45); );
if .a eql 0 then undecl (43,46);
if .a neq 1 then ( undecl (43,47); );
if .b geq 2 then ( undecl (45,48); );
if .b geq 2 then ( undecl (45,49); );
if .b geq 2 then undecl (45,50); 
if .b leq 2 then undecl (45,51); 
if .b leq 2 then ( undecl (45,526);  );
if .b leq 2 then undecl (45,46) else undecl(46,45);
if .b leq 2 then ( undecl (47,48) ) else ( undecl(48,49) );
if .b geq 2 then ( undecl (47,49) ) else ( undecl(48,50) );
undecl(128^(0-3),0);
undecl(0,16^3);
undecl(129,16^(0-.b));
undecl(130,130);
undecl(a,b);
undecl(c,d);
undecl(4,0);

if .b geq 4 then dd=4;
undecl(dd,.dd);
undecl(4,1);
if .b then dd=4;
undecl(dd,.dd);
undecl(4,2);
end;
routine s=
begin
external routine undecl;
external routine amalloc;
external routine zzzz;
own d,c;
zzzz();
!pppp(1,2);
!pppp(255,2);
undecl(dd,44);
undecl(c,.c);
c=amalloc();
undecl(c,.c);
undecl(d,.d);
d=2;
undecl(d,.d);
r();
d=3;
r();
undecl(d,d);
undecl(2,3);
undecl2();
end;
routine t=
begin
own e,f;
f=6;
undecl(.f,.f);
while .f geq 3 do begin
r();
undecl(9,.f);
f=.f-1;
end;
undecl(768,768);
!return;
e=2;
dummy2();
end;

routine retval=
begin
local a;
a=3;
42
end;

routine retval2=
begin
external routine retval;
external routine undecl;
local l;
l=retval();
undecl(7,8);
undecl(l,.l);
end;

end
eludom

