%( Define ISO C stdio on top of C++ iostreams.
   Copyright (C) 1991,1994-2002,2003,2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  )%

%(
 *	ISO C99 Standard: 7.19 Input/output	<stdio.h>
 )%

%if not %declared(%quote _STDIO_H) %then
literal _STDIO_H = 1;

literal null = 0;

%( The possibilities for the third argument to `setvbuf'.  )%
literal _IOFBF = 0; 		%( Fully buffered.  )%
literal _IOLBF = 1;		%( Line buffered.  )%
literal _IONBF = 2;		%( No buffering.  )%

%( End of file character.
   Some things throughout the library rely on this being -1.  )%
%if not %declared(%quote EOF) %then
literal EOF = -1;
%fi


%( The possibilities for the third argument to `fseek'.
   These values should not be changed.  )%
literal SEEK_SET = 0;	%( Seek from beginning of file.  )%
literal SEEK_CUR = 1;	%( Seek from current position.  )%
literal SEEK_END = 2;	%( Seek from end of file.  )%

%( Get the values:
   L_tmpnam	How long an array of chars must be to be passed to `tmpnam'.
   TMP_MAX	The minimum number of unique filenames generated by tmpnam
   		(and tempnam when it uses tmpnam's name space),
		or tempnam (the two are separate).
   L_ctermid	How long an array to pass to `ctermid'.
   L_cuserid	How long an array to pass to `cuserid'.
   FOPEN_MAX	Minimum number of files that can be open at once.
   FILENAME_MAX	Maximum length of a filename.  )%
! not yet #include <bits/stdio_lim.h>


%( Standard streams.  )%
external stdin;		%( Standard input stream.  )%
external stdout;		%( Standard output stream.  )%
external stderr;		%( Standard error output stream.  )%

%( Remove file FILENAME.  )%
external routine remove : bliss addressing_mode (general);
%( Rename file OLD to NEW.  )%
external routine rename : bliss addressing_mode (general);

%( Create a temporary file and open it read/write.  )%
external routine tmpfile : bliss addressing_mode (general);

external routine tmpfile64 : bliss addressing_mode (general);

%( Generate a temporary filename.  )%
external routine tmpnam : bliss addressing_mode (general);
%( This is the reentrant variant of `tmpnam'.  The only difference is
   that it does not allow S to be NULL.  )%
external routine tmpnam_r : bliss addressing_mode (general);

%( Generate a unique temporary filename using up to five characters of PFX
   if it is not NULL.  The directory to put this file in is searched for
   as follows: First the environment variable "TMPDIR" is checked.
   If it contains the name of a writable directory, that directory is used.
   If not and if DIR is not NULL, that value is checked.  If that fails,
   P_tmpdir is tried and finally "/tmp".  The storage for the filename
   is allocated by `malloc'.  )%
external routine tempnam : bliss addressing_mode (general);

%( Close STREAM.  )%
external routine fclose : bliss addressing_mode (general);
%( Flush STREAM, or all streams if STREAM is NULL.  )%
external routine fflush : bliss addressing_mode (general);

%( Faster versions when locking is not required.  )%
external routine fflush_unlocked : bliss addressing_mode (general);

%( Close all streams.  )%
external routine fcloseall : bliss addressing_mode (general);

%( Open a file and create a new stream for it.  )%
external routine fopen : bliss addressing_mode (general);
%( Open a file, replacing an existing stream with it.  )%
external routine freopen : bliss addressing_mode (general);
%else
external routine fopen : bliss addressing_mode (general);
external routine freopen : bliss addressing_mode (general);
external routine fopen64 : bliss addressing_mode (general);
external routine freopen64 : bliss addressing_mode (general);

%( Create a new stream that refers to an existing system file descriptor.  )%
external routine fdopen : bliss addressing_mode (general);

%( Create a new stream that refers to the given magic cookie,
   and uses the given functions for input and output.  )%
external routine fopencookie : bliss addressing_mode (general);

%( Create a new stream that refers to a memory buffer.  )%
external routine fmemopen : bliss addressing_mode (general);

%( Open a stream that writes into a malloc'd buffer that is expanded as
   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location
   and the number of characters written on fflush or fclose.  )%
external routine open_memstream : bliss addressing_mode (general);

%( If BUF is NULL, make STREAM unbuffered.
   Else make it use buffer BUF, of size BUFSIZ.  )%
external routine setbuf : bliss addressing_mode (general);
%( Make STREAM use buffering mode MODE.
   If BUF is not NULL, use N bytes of it for buffering;
   else allocate an internal buffer N bytes long.  )%
external routine setvbuf : bliss addressing_mode (general);

%( If BUF is NULL, make STREAM unbuffered.
   Else make it use SIZE bytes of BUF for buffering.  )%
external routine setbuffer : bliss addressing_mode (general);

%( Make STREAM line-buffered.  )%
external routine setlinebuf : bliss addressing_mode (general);

%( Write formatted output to STREAM.  )%
external routine fprintf : bliss addressing_mode (general);
%( Write formatted output to stdout.  )%
external routine printf : bliss addressing_mode (general);
%( Write formatted output to S.  )%
external routine sprintf : bliss addressing_mode (general);

%( Write formatted output to S from argument list ARG.  )%
external routine vfprintf : bliss addressing_mode (general);
%( Write formatted output to stdout from argument list ARG.  )%
external routine vprintf : bliss addressing_mode (general);
%( Write formatted output to S from argument list ARG.  )%
external routine vsprintf : bliss addressing_mode (general);

%( Maximum chars of output to write in MAXLEN.  )%
external routine snprintf : bliss addressing_mode (general);

external routine vsnprintf : bliss addressing_mode (general);

%( Write formatted output to a string dynamically allocated with `malloc'.
   Store the address of the string in *PTR.  )%
external routine vasprintf : bliss addressing_mode (general);
external routine __asprintf : bliss addressing_mode (general);
external routine asprintf : bliss addressing_mode (general);

%( Write formatted output to a file descriptor.  )%
external routine vdprintf : bliss addressing_mode (general);
external routine dprintf : bliss addressing_mode (general);

%( Read formatted input from STREAM.  )%
external routine fscanf : bliss addressing_mode (general);
%( Read formatted input from stdin.  )%
external routine scanf : bliss addressing_mode (general);
%( Read formatted input from S.  )%
external routine sscanf : bliss addressing_mode (general);

%( Read formatted input from S into argument list ARG.  )%
external routine vfscanf : bliss addressing_mode (general);

%( Read formatted input from stdin into argument list ARG.  )%
external routine vscanf : bliss addressing_mode (general);

%( Read formatted input from S into argument list ARG.  )%
external routine vsscanf : bliss addressing_mode (general);

%( Read a character from STREAM.  )%
external routine fgetc : bliss addressing_mode (general);
external routine getc : bliss addressing_mode (general);

%( Read a character from stdin.  )%
external routine getchar : bliss addressing_mode (general);

%( These are defined in POSIX.1:1996.  )%
external routine getc_unlocked : bliss addressing_mode (general);
external routine getchar_unlocked : bliss addressing_mode (general);

%( Faster version when locking is not necessary.  )%
external routine fgetc_unlocked : bliss addressing_mode (general);

%( Write a character to STREAM.  )%
external routine fputc : bliss addressing_mode (general);
external routine putc : bliss addressing_mode (general);

%( Write a character to stdout.  )%
external routine putchar : bliss addressing_mode (general);

%( Faster version when locking is not necessary.  )%
external routine fputc_unlocked : bliss addressing_mode (general);

%( These are defined in POSIX.1:1996.  )%
external routine putc_unlocked : bliss addressing_mode (general);
external routine putchar_unlocked : bliss addressing_mode (general);

%( Get a word (int) from STREAM.  )%
external routine getw : bliss addressing_mode (general);

%( Write a word (int) to STREAM.  )%
external routine putw : bliss addressing_mode (general);

%( Get a newline-terminated string of finite length from STREAM.  )%
external routine fgets : bliss addressing_mode (general);

%( Get a newline-terminated string from stdin, removing the newline.
   DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.  )%
external routine gets : bliss addressing_mode (general);

%( This function does the same as `fgets' but does not lock the stream.  )%
external routine fgets_unlocked : bliss addressing_mode (general);

%( Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   necessary.  Returns the number of characters read (not including the
   null terminator), or -1 on error or EOF.  )%
external routine __getdelim : bliss addressing_mode (general);
external routine getdelim : bliss addressing_mode (general);

%( Like `getdelim', but reads up to a newline.  )%
external routine getline : bliss addressing_mode (general);

%( Write a string to STREAM.  )%
external routine fputs : bliss addressing_mode (general);

%( Write a string, followed by a newline, to stdout.  )%
external routine puts : bliss addressing_mode (general);

%( Push a character back onto the input buffer of STREAM.  )%
external routine ungetc : bliss addressing_mode (general);

%( Read chunks of generic data from STREAM.  )%
external routine fread : bliss addressing_mode (general);
%( Write chunks of generic data to STREAM.  )%
external routine fwrite : bliss addressing_mode (general);

%( This function does the same as `fputs' but does not lock the stream.  )%
external routine fputs_unlocked : bliss addressing_mode (general);

%( Faster versions when locking is not necessary.  )%
external routine fread_unlocked : bliss addressing_mode (general);
external routine fwrite_unlocked : bliss addressing_mode (general);

%( Seek to a certain position on STREAM.  )%
external routine fseek : bliss addressing_mode (general);
%( Return the current position of STREAM.  )%
external routine ftell : bliss addressing_mode (general);
%( Rewind to the beginning of STREAM.  )%
external routine rewind : bliss addressing_mode (general);

%( The Single Unix Specification, Version 2, specifies an alternative,
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   are originally defined in the Large File Support API.  )%

%( Seek to a certain position on STREAM.  )%
external routine fseeko : bliss addressing_mode (general);
%( Return the current position of STREAM.  )%
external routine ftello : bliss addressing_mode (general);

%( Get STREAM's position.  )%
external routine fgetpos : bliss addressing_mode (general);
%( Set STREAM's position.  )%
external routine fsetpos : bliss addressing_mode (general);

external routine fseeko64 : bliss addressing_mode (general);
external routine ftello64 : bliss addressing_mode (general);
external routine fgetpos64 : bliss addressing_mode (general);
external routine fsetpos64 : bliss addressing_mode (general);

%( Clear the error and EOF indicators for STREAM.  )%
external routine clearerr : bliss addressing_mode (general);
%( Return the EOF indicator for STREAM.  )%
external routine feof : bliss addressing_mode (general);
%( Return the error indicator for STREAM.  )%
external routine ferror : bliss addressing_mode (general);

%( Faster versions when locking is not required.  )%
external routine clearerr_unlocked : bliss addressing_mode (general);
external routine feof_unlocked : bliss addressing_mode (general);
external routine ferror_unlocked : bliss addressing_mode (general);

%( Print a message describing the meaning of the value of errno.  )%
external routine perror : bliss addressing_mode (general);

%( Provide the declarations for `sys_errlist' and `sys_nerr' if they
   are available on this system.  Even if available, these variables
   should not be used directly.  The `strerror' function provides
   all the necessary functionality.  )%
! not yet #include <bits/sys_errlist.h>

%( Return the system file descriptor for STREAM.  )%
external routine fileno : bliss addressing_mode (general);

%( Faster version when locking is not required.  )%
external routine fileno_unlocked : bliss addressing_mode (general);

%( Create a new stream connected to a pipe running the given command.  )%
external routine popen : bliss addressing_mode (general);

%( Close a stream opened by popen and return the status of its child.  )%
external routine pclose : bliss addressing_mode (general);

%( Return the name of the controlling terminal.  )%
external routine ctermid : bliss addressing_mode (general);

%( Return the name of the current user.  )%
external routine cuserid : bliss addressing_mode (general);

%( Write formatted output to an obstack.  )%
external routine obstack_printf : bliss addressing_mode (general);
external routine obstack_vprintf : bliss addressing_mode (general);

%( These are defined in POSIX.1:1996.  )%

%( Acquire ownership of STREAM.  )%
external routine flockfile : bliss addressing_mode (general);

%( Try to acquire ownership of STREAM but do not block if it is not
   possible.  )%
external routine ftrylockfile : bliss addressing_mode (general);

%( Relinquish the ownership granted for STREAM.  )%
external routine funlockfile : bliss addressing_mode (general);

%fi%( !_STDIO_H )%
