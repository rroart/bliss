%( System-specific socket constants and types.  Linux version.
   Copyright (C) 1991,1992,1994-2001, 2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  )%

%( Types of sockets.  )%

literal  SOCK_STREAM = 1;		%( Sequenced, reliable, connection-based
				   byte streams.  )%
literal  SOCK_DGRAM = 2;		%( Connectionless, unreliable datagrams
				   of fixed maximum length.  )%
literal  SOCK_RAW = 3;			%( Raw protocol interface.  )%
literal  SOCK_RDM = 4;			%( Reliably-delivered messages.  )%
literal  SOCK_SEQPACKET = 5;		%( Sequenced, reliable, connection-based,
				   datagrams of fixed maximum length.  )%
literal  SOCK_PACKET = 10;		%( Linux specific way of getting packets
				   at the dev level.  For writing rarp and
				   other similar things on the user level. )%

%( Protocol families.  )%
literal PF_UNSPEC = 0;	%( Unspecified.  )%
literal PF_LOCAL = 1;	%( Local to host (pipes and file-domain).  )%
literal PF_UNIX = PF_LOCAL; %( Old BSD name for PF_LOCAL.  )%
literal PF_FILE = PF_LOCAL; %( Another non-standard name for PF_LOCAL.  )%
literal PF_INET = 2;	%( IP protocol family.  )%
literal PF_AX25 = 3;	%( Amateur Radio AX.25.  )%
literal PF_IPX = 4;	%( Novell Internet Protocol.  )%
literal PF_APPLETALK = 5;	%( Appletalk DDP.  )%
literal PF_NETROM = 6;	%( Amateur radio NetROM.  )%
literal PF_BRIDGE = 7;	%( Multiprotocol bridge.  )%
literal PF_ATMPVC = 8;	%( ATM PVCs.  )%
literal PF_X25 = 9;	%( Reserved for X.25 project.  )%
literal PF_INET6 = 10;	%( IP version 6.  )%
literal PF_ROSE = 11;	%( Amateur Radio X.25 PLP.  )%
literal PF_DECnet = 12;	%( Reserved for DECnet project.  )%
literal PF_NETBEUI = 13;	%( Reserved for 802.2LLC project.  )%
literal PF_SECURITY = 14;	%( Security callback pseudo AF.  )%
literal PF_KEY = 15;	%( PF_KEY key management API.  )%
literal PF_NETLINK = 16;
literal PF_ROUTE = PF_NETLINK; %( Alias to emulate 4.4BSD.  )%
literal PF_PACKET = 17;	%( Packet family.  )%
literal PF_ASH = 18;	%( Ash.  )%
literal PF_ECONET = 19;	%( Acorn Econet.  )%
literal PF_ATMSVC = 20;	%( ATM SVCs.  )%
literal PF_SNA = 22;	%( Linux SNA Project )%
literal PF_IRDA = 23;	%( IRDA sockets.  )%
literal PF_PPPOX = 24;	%( PPPoX sockets.  )%
literal PF_WANPIPE = 25;	%( Wanpipe API sockets.  )%
literal PF_BLUETOOTH = 31;	%( Bluetooth sockets.  )%
literal PF_MAX = 32;	%( For now..  )%

%( Address families.  )%
literal AF_UNSPEC = PF_UNSPEC;
literal AF_LOCAL = PF_LOCAL;
literal AF_UNIX = PF_UNIX;
literal AF_FILE = PF_FILE;
literal AF_INET = PF_INET;
literal AF_AX25 = PF_AX25;
literal AF_IPX = PF_IPX;
literal AF_APPLETALK = PF_APPLETALK;
literal AF_NETROM = PF_NETROM;
literal AF_BRIDGE = PF_BRIDGE;
literal AF_ATMPVC = PF_ATMPVC;
literal AF_X25 = PF_X25;
literal AF_INET6 = PF_INET6;
literal AF_ROSE = PF_ROSE;
literal AF_DECnet = PF_DECnet;
literal AF_NETBEUI = PF_NETBEUI;
literal AF_SECURITY = PF_SECURITY;
literal AF_KEY = PF_KEY;
literal AF_NETLINK = PF_NETLINK;
literal AF_ROUTE = PF_ROUTE;
literal AF_PACKET = PF_PACKET;
literal AF_ASH = PF_ASH;
literal AF_ECONET = PF_ECONET;
literal AF_ATMSVC = PF_ATMSVC;
literal AF_SNA = PF_SNA;
literal AF_IRDA = PF_IRDA;
literal AF_PPPOX = PF_PPPOX;
literal AF_WANPIPE = PF_WANPIPE;
literal AF_BLUETOOTH = PF_BLUETOOTH;
literal AF_MAX = PF_MAX;

%( Socket level values.  Others are defined in the appropriate headers.

   XXX These definitions also should go into the appropriate headers as
   far as they are available.  )%
literal SOL_RAW = 255;
literal SOL_DECNET = 261;
literal SOL_X25 = 262;
literal SOL_PACKET = 263;
literal SOL_ATM = 264;	%( ATM layer (cell level).  )%
literal SOL_AAL = 265;	%( ATM Adaption Layer (packet level).  )%
literal SOL_IRDA = 266;

%( Maximum queue length specifiable by listen.  )%
literal SOMAXCONN = 128;

%( Bits in the FLAGS argument to `send', `recv', et al.  )%
literal    MSG_OOB		= %x'01';	%( Process out-of-band data.  )%
literal    MSG_PEEK		= %x'02';	%( Peek at incoming messages.  )%
literal    MSG_DONTROUTE	= %x'04';	%( Don't use local routing.  )%
    %( DECnet uses a different name.  )%
literal    MSG_TRYHARD		= MSG_DONTROUTE;
literal    MSG_CTRUNC		= %x'08';	%( Control data lost before delivery.  )%
literal    MSG_PROXY		= %x'10';	%( Supply or ask second address.  )%
literal    MSG_TRUNC		= %x'20';
literal    MSG_DONTWAIT	= %x'40'; %( Nonblocking IO.  )%
literal    MSG_EOR		= %x'80'; %( End of record.  )%
literal    MSG_WAITALL		= %x'100'; %( Wait for a full request.  )%
literal    MSG_FIN		= %x'200';
literal    MSG_SYN		= %x'400';
literal    MSG_CONFIRM		= %x'800'; %( Confirm path validity.  )%
literal    MSG_RST		= %x'1000';
literal    MSG_ERRQUEUE	= %x'2000'; %( Fetch message from error queue.  )%
literal    MSG_NOSIGNAL	= %x'4000'; %( Do not generate SIGPIPE.  )%
literal    MSG_MORE		= %x'8000';  %( Sender will send more.  )%

%( Structure describing messages sent by
   `sendmsg' and received by `recvmsg'.  )%
macro msg_name = 0,0,32,0%;		%( Address to send to/receive from.  )%
macro msg_namelen = 4,0,32,0%;	%( Length of address data.  )%

macro msg_iov = 8,0,32,0%;	%( Vector of data to send/receive into.  )%
macro msg_iovlen = 12,0,32,0%;		%( Number of elements in the vector.  )%

macro msg_control = 16,0,32,0%;		%( Ancillary data (eg BSD filedesc passing). )%
macro msg_controllen = 20,0,32,0%;	%( Ancillary data buffer length.  )%

macro msg_flags = 24,0,32,0%;		%( Flags on received message.  )%

%( Structure used for storage of ancillary data object information.  )%
macro cmsg_len = 0,0,32,0%;		%( Length of data in cmsg_data plus length
				   of cmsghdr structure.  )%
macro cmsg_level = 4,0,32,0%;		%( Originating protocol.  )%
macro cmsg_type = 8,0,32,0%;		%( Protocol specific type.  )%
macro __cmsg_data = 12,0,0,0%; %( Ancillary data.  )%

%( Ancillary data object manipulation macros.  )%
%if 0 %then
 define CMSG_DATA(cmsg) ((cmsg)->__cmsg_data)
define CMSG_NXTHDR(mhdr, cmsg) __cmsg_nxthdr (mhdr, cmsg)
define CMSG_FIRSTHDR(mhdr) 
  ((size_t) (mhdr)->msg_controllen >= sizeof (struct cmsghdr)		      
   p (struct cmsghdr *) (mhdr)->msg_control : (struct cmsghdr *) NULL)
define CMSG_ALIGN(len) (((len) + sizeof (size_t) - 1) 
			 AND (size_t) NOT (sizeof (size_t) - 1))
define CMSG_SPACE(len) (CMSG_ALIGN (len) 
			 + CMSG_ALIGN (sizeof (struct cmsghdr)))
define CMSG_LEN(len)   (CMSG_ALIGN (sizeof (struct cmsghdr)) + (len))
%fi

external routine __cmsg_nxthdr : bliss addressing_mode (general);

%( Socket level message types.  This must match the definitions in
   <linux/socket.h>.  )%
literal    SCM_RIGHTS = %x'01';		%( Transfer file descriptors.  )%
literal    SCM_CREDENTIALS = %x'02';	%( Credentials passing.  )%

%( User visible structure for SCM_CREDENTIALS message )%

macro pid = 0,0,32,0%;			%( PID of sending process.  )%
macro uid = 4,0,32,0%;			%( UID of sending process.  )%
macro gid = 8,0,32,0%;			%( GID of sending process.  )%

%( Get socket manipulation related informations from kernel headers.  )%
!include <asm/socket.h>

%( Structure used to manipulate the SO_LINGER option.  )%
macro l_onoff = 0,0,32,0%;		%( Nonzero to linger on close.  )%
macro l_linger = 4,0,32,0 %;		%( Time to linger.  )%

%( Declarations of socket constants, types, and functions.
   Copyright (C) 1991,92,1994-2001,2003 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  )%

%( This operating system-specific header file defines the SOCK_*, PF_*,
   AF_*, MSG_*, SOL_*, and SO_* constants, and the `struct sockaddr',
   `struct msghdr', and `struct linger' types.  )%

%( This is the 4.3 BSD `struct sockaddr' format, which is used as wire
   format in the grotty old 4.3 `talk' protocol.  )%
macro sa_family = 0,0,16,0 %;
macro sa_data = 2,0,0,0%;

%( The following constants should be used for the second parameter of
   `shutdown'.  )%
literal  SHUT_RD = 0;		%( No more receptions.  )%
literal  SHUT_WR = 1;		%( No more transmissions.  )%
literal  SHUT_RDWR = 2;		%( No more receptions or transmissions.  )%

%( This is the type we use for generic socket address arguments.

   With GCC 2.7 and later, the funky union causes redeclarations or
   uses with any of the listed types to be allowed without complaint.
   G++ 2.7 does not support transparent unions so there we want the
   old-style declaration, too.  )%
%( Add more `struct sockaddr_AF' types here as necessary.
   These are all the ones I found on NetBSD and Linux.  )%

%( Create a new socket of type TYPE in domain DOMAIN, using
   protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.
   Returns a file descriptor for the new socket, or -1 for errors.  )%
external routine socket : bliss addressing_mode (general);

%( Create two new sockets, of type TYPE in domain DOMAIN and using
   protocol PROTOCOL, which are connected to each other, and put file
   descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,
   one will be chosen automatically.  Returns 0 on success, -1 for errors.  )%
external routine socketpair : bliss addressing_mode (general);

%( Give the socket FD the local address ADDR (which is LEN bytes long).  )%
!external routine bind : bliss addressing_mode (general);

%( Put the local address of FD into *ADDR and its length in *LEN.  )%
external routine getsockname : bliss addressing_mode (general);

%( Open a connection on socket FD to peer at ADDR (which LEN bytes long).
   For connectionless socket types, just set the default address to send to
   and the only address from which to accept transmissions.
   Return 0 on success, -1 for errors.  )%
external routine connect : bliss addressing_mode (general);

%( Put the address of the peer connected to socket FD into *ADDR
   (which is *LEN bytes long), and its actual length into *LEN.  )%
external routine getpeername : bliss addressing_mode (general);


%( Send N bytes of BUF to socket FD.  Returns the number sent or -1.  )%
external routine send : bliss addressing_mode (general);

%( Read N bytes into BUF from socket FD.
   Returns the number read or -1 for errors.  )%
external routine recv : bliss addressing_mode (general);

%( Send N bytes of BUF on socket FD to peer at address ADDR (which is
   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.  )%
external routine sendto : bliss addressing_mode (general);

%( Read N bytes into BUF through socket FD.
   If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of
   the sender, and store the actual size of the address in *ADDR_LEN.
   Returns the number of bytes read or -1 for errors.  )%
external routine recvfrom : bliss addressing_mode (general);

%( Send a message described MESSAGE on socket FD.
   Returns the number of bytes sent, or -1 for errors.  )%
external routine sendmsg : bliss addressing_mode (general);

%( Receive a message as described by MESSAGE from socket FD.
   Returns the number of bytes read or -1 for errors.  )%
external routine recvmsg : bliss addressing_mode (general);

%( Put the current value for socket FD's option OPTNAME at protocol level LEVEL
   into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's
   actual length.  Returns 0 on success, -1 for errors.  )%
external routine getsockopt : bliss addressing_mode (general);

%( Set socket FD's option OPTNAME at protocol level LEVEL
   to *OPTVAL (which is OPTLEN bytes long).
   Returns 0 on success, -1 for errors.  )%
external routine setsockopt : bliss addressing_mode (general);

%( Prepare to accept connections on socket FD.
   N connection requests will be queued before further requests are refused.
   Returns 0 on success, -1 for errors.  )%
external routine listen : bliss addressing_mode (general);

%( Await a connection on socket FD.
   When a connection arrives, open a new socket to communicate with it,
   set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting
   peer and *ADDR_LEN to the address's actual length, and return the
   new socket's descriptor, or -1 for errors.  )%
external routine accept : bliss addressing_mode (general);

%( Shut down all or part of the connection open on socket FD.
   HOW determines what to shut down:
     SHUT_RD   = No more receptions;
     SHUT_WR   = No more transmissions;
     SHUT_RDWR = No more receptions or transmissions.
   Returns 0 on success, -1 for errors.  )%
external routine shutdown : bliss addressing_mode (general);

%( Determine wheter socket is at a out-of-band mark.  )%
external routine sockatmark : bliss addressing_mode (general);

%( FDTYPE is S_IFSOCK or another S_IF* macro defined in <sys/stat.h>;
   returns 1 if FD is open on an object of the indicated type, 0 if not,
   or -1 for errors (setting errno).  )%
external routine isfdtype : bliss addressing_mode (general);
