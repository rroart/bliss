#ifndef IGNORANCE_H
#define IGNORANCE_H

#if 0
#define BITS "BLS32"
/*
#define BITS "BLS64"
*/

#define QUE "%BLS-F-QUAL-QUE"
#define NOQUAL "%BLS-W-QUAL-NOT-IMPLEMENTED-"
#define OK "%BLS-I-PARSED-OK-That's a module alright"
#define GEN "%BLS-I-GENERATING-CODE"
#define KOR "%BLS-I-RUN-K|r s} det ryker!"

extern int undefmode;
extern int anymode;
extern int tnamemode;
extern int yy2debug;

typedef enum {
  integer_literal,
  addressing_mode_attribute,
  weak_attribute,
  unlabeled_block,
  string_type,
  plit2,
  p_chesc,
  p_char,
  p_string,
  case_label_list,
  mode_16,
  mode_32,
  list_option,
  access_part,
  string_par_list,
  common_switch,
  bliss_16_switch,
  bliss_32_switch,
  bliss_36_switch,
  environment,
  addr_external,
  addr_non_external,
  sw_addressing_mode,
  environ_16_option,
  addressing_mode,
  string_literal,
  char_par_list,
  lexical_function,
  own_attribute_list,
  own_attribute,
  case_label,
  initial_group,
  pre_tested_loop,
  post_tested_loop,
  leave_expression,
  plit,
  plit3,
  plit_group,
  conditional_expression,
  conditional_expression2,
  alloc_actual_list,
  tname_list2,
  op_exp,
  opexp,
  opexp1,
  opexp2,
  opexp3,
  opexp4,
  opexp5,
  opexp6,
  opexp7,
  io_actual_parameter_list,
  map_declaration_attribute_list,
  external_declaration,
  io_actual_parameter,
  opexp8,
  opexp9,
  opexp10,
  opexp11,
  pot_expression,
  opexp12,
  attached_label_list,
  io_list3,
  ordinary_routine_call,
  infix_expression,
  general_routine_call,
  attribute_list,
  codecomment,
  decimal_literal,
  digits,
  field_stuff_list,
  forward_item,
  global_reg_item_list,
  initial_attribute,
  initial_item_list,
  integer_digit_list,
  labeled_block,
  local_item,
  map_item,
  plit_item_list,
  preset_attribute,
  psect_allocation,
  quoted_string_list,
  segment_expression,
  field_attribute,
  register_item,
  external_reg_item,
  global_reg_item,
  preset_item,
  decl_list,
  ordinary_routine_declaration,
  external_routine_declaration,
  external_routine_item_list,
  routine_definition_list,
  formal_item_list,
  module_head,
  own_declaration_list,
  own_item_list,
  own_declaration,
  block_action_list,
  maybe_block_action_list,
  block_action,
  alignment_attribute,
  range_attribute,
  structure_attribute,
  allocation_unit,
  extension_attribute,
  language_name_list,
  list_option_list,
  ident,
  language,
  linkage,
  list,
  structure,
  b_main,
  optlevel,
  version,
  title,
  linkage_definition_list,
  linkage_definition,
  input_parameter_location_list,
  input_parameter_location,
  output_parameter_location_list,
  output_parameter_location,
  tname_list,
  bind_data_attribute,
  psect_item_list,
  psect_item,
  storage_class,
  psect_attribute_list,
  psect_attribute,
  b32_psect_attribute,
  bind_data_attribute_list,
  bind_data_declaration,
  bind_data_item,
  bind_data_item_list,
  bind_routine_attribute,
  bind_routine_attribute_list,
  bind_routine_declaration,
  bind_routine_item,
  bind_routine_item_list,
  iterative_macro_definition2,
  keyword_macro_definition,
  key_macro_definition,
  simple_macro_definition,
  conditional_macro_definition,
  external_literal_declaration,
  external_literal_item,
  external_literal_item_list,
  literal_attribute,
  key_macro_declaration,
  positional_macro_declaration,
  positional_macro_definition_list,
  positional_macro_definition,
  iterative_macro_definition,
  keyword_macro_definition_list,
  macro_body,
  default_actual,
  keyword_macro_declaration,
  keyword_pair,
  keyword_pair_list,
  lexeme_list,
  positional_macro_definiton,
  positional_macro_definiton_list,
  literal_attribute_list,
  literal_declaration,
  literal_item,
  literal_item_list,
  language_name,
  volatile_attribute,
  novalue_attribute,
  linkage_attribute,
  block_body,
  block_body2,
  assign_expression,
  own_item,
  module,
  return_expression,
  global_routine_definiton,
  mode_spec_list,
  cond_handling_function_name,
  field_declaration,
  declaration_list,
  enable_declaration,
  bound_declaration,
  compiletime_declaration,
  macro_declaration,
  require_declaration,
  library_declaration,
  psect_declaration,
  switches_declaration,
  label_declaration,
  builtin_declaration,
  undeclare_declaration,
  linkage_declaration,
  global_routine_declaration,
  forward_routine_declaration,
  routine_declaration,
  routine_definition,
  io_list,
  io_list2,
  formal_item,
  routine_attribute_list,
  formal_attribute_list,
  routine_attribute,
  map_declaration_attribute,
  global_routine_definition_list,
  access_actual_list,
  select_line_list,
  executable_function,
  case_line_list,
  select_label_list,
  actual_parameter_list,
  access_formal_list,
  allocation_formal_list,
  global_declaration,
  global_item_list,
  external_item_list,
  forward_declaration,
  forward_item_list,
  local_declaration,
  local_item_list,
  stackglocal_declaration,
  register_declaration,
  register_item_list,
  global_register_declaration,
  external_register_declaration,
  external_reg_item_list,
  map_declaration,
  map_item_list,
  structure_declaration,
  structure_definition_list,
  structure_definition,
  allocation_formal,
  fetch_expression,
  default_structure_reference,
  global_routine_definition,
  global_routine_attribute,
  forward_routine_attribute,
  external_routine_attribute,
  global_io_list2,
  opt_mhargs,
  ms_list,
  module_body,
  on_off_switch,
  special_switch,
  name_list,
  tname,
  tvalue,
  global_routine_attribute_list,
  forward_routine_item_list,
  forward_routine_attribute_list,
  ext_routine_attribute_list,
  external_item,
  global_item,
  initial_item,
  plit_item,
  forward_routine_item,
  external_routine_item,
  ext_routine_attribute,
  external_routine_attribute_list,
  ext_routine_item_list,
  ext_routine_item,
  gdummy
} node_Attr_t;

int switch_main;
int switch_optlevel;
int switch_ident;
int switch_version;
int switch_language;
int switch_list;
int linenumb;
char *ig_main;
char *p_title;
char ig_name[128];
#if 0
typedef struct ignode *ignodeptr;
typedef struct ignode {
  int type;
  char name[80];
  int linenumb;
  ignodeptr next;
  ignodeptr left;
  ignodeptr middle;
  /*  union {*/
  int value;
  char *id;
  /*  } u;*/
} ignodetree;
ignodeptr igroot;
#endif
#endif
#endif
