# Top level makefile fragment for BLISS For GCC. -*- makefile -*-
# Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: gcc)
# - the compiler proper (eg: bliss)
# - define the names for selecting the language in LANGUAGES.
#

## note program-prefix and program-suffix options are not supported
## just program_transform_name which is a sed script to transform the
## names

LEX = flex

# bison for the preprocessor and maybe something else for the main compiler. 

#YACC = msta
#YACCFLAGS = 

# xxx; need dependencies on the configuration files. 

# back end compiler libraries etc
BLI_BE_LIBS = toplev.o main.o libbackend.a $(LIBIBERTY) $(INTLLIBS) $(LIBS) $(LIBDEPS) 
BLI_PRE_LIBS = $(LIBIBERTY) 
#safe-ctype.o
BLISS_EXTRAS = -B./ -B./bliss/
blisrc=$(srcdir)/bliss
blibld = bliss
#-I./ -I./include
#GCC_FOR_BLISS = ./xgcc
#$(CC) 
#./xgcc 
# $(BLISS_EXTRAS)
#	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
#	  -DTARGET_NAME=\"$(target_alias)\" \
#	  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)
GCC_FOR_BLISS = `if [ -f ./xgcc ] ; then \
	    echo ./xgcc ; \
	 else \
	    echo $(CC) ; \
	 fi`

BLI_GENERATED = $(blibld)/parse.c $(blibld)/blilex.c

BLI_EXES = bliss/blif2v$(exeext)

BLI_LIBS = 

BLI_NEW_UTIL_H = 

BLI_NEW_UTIL_C = 

BLI_NEW_UTIL = $(BLI_NEW_UTIL_H) $(BLI_NEW_UTIL_C) 

BLI_NEW_UTILS = 

#no -Wtraditional warnings, allow long long
bliss-warn = $(LOOSE_WARN) -pedantic -Wno-long-long -Wmissing-prototypes -Wmissing-declarations

#
# Define the names for selecting bliss in LANGUAGES.

.phony: bliss BLISS

bliss BLISS:bliss.done bliss.check.drivers.done

bliss.done: bli1$(exeext)
	${STAMP} bliss.done

# core compiler 
bli1$(exeext): bliss/blilex.o attribs.o tree.o \
	 bliss/parse.o $(BLI_NEW_UTILS) \
	 bliss/bli-semantics.o bliss/bli-decl.o bliss/bli-typeck.o bliss/bli-common.o bliss/bli-lang.o bliss/bli-convert.o bliss/bli-common2.o bliss/bli-format.o bliss/bli-errors.o bliss/bli-opts.o $(BLI_BE_LIBS)
	$(GCC_FOR_BLISS) $(ALL_CFLAGS) $(LDFLAGS) $(BLISS_EXTRAS) -o $@ \
	 bliss/blilex.o attribs.o tree.o \
	 bliss/parse.o $(BLI_NEW_UTILS) bliss/bli-semantics.o bliss/bli-decl.o bliss/bli-typeck.o bliss/bli-common.o bliss/bli-lang.o bliss/bli-convert.o bliss/bli-common2.o bliss/bli-format.o bliss/bli-errors.o bliss/bli-opts.o \
	 $(BLI_BE_LIBS)
#c-convert.o c-common.o c-typeck.o c-decl.o $(BLI_BE_LIBS) 


# test drivers
.phony: bliss-check
check-bliss: bliss.check
bliss.check.drivers.done: $(BLISS_TEST_DRIVERS)
	${STAMP} bliss.check.drivers.done

#
# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

# object file makes

bliss/blilex.o: $(blibld)/blilex.c bliss/parse.h \
	 $(BLI_UTIL_H) \
	 $(BLI_NEW_UTIL_H)
	$(GCC_FOR_BLISS) $(BLISS_EXTRAS) -o $@ -c $(ALL_CFLAGS) $(INCLUDES) $< 

bliss/parse.h: bliss/parse.c
bliss/parse.c: $(blisrc)/parse.y
	@echo "Expect 33 shift/reduce conflicts and 58 reduce/reduce conflicts."
	cd bliss && \
	if $(BISON) $(BISONFLAGS) -d -o p$$$$.c ../$(srcdir)/bliss/parse.y; then \
	  grep '^#define[       ]*YYEMPTY' p$$$$.c >> p$$$$.h ; \
	  test -f p$$$$.output && mv -f p$$$$.output parse.output ; \
	  mv -f p$$$$.c parse.c ; mv -f p$$$$.h parse.h ; \
	else \
	  rm -f p$$$$.* ; \
	  false ; \
	fi

bliss/parse.o: bliss/parse.c $(BLISS_TREE_H) \
	$(SYSTEM_H) toplev.h $(GGC_H)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \
		bliss/parse.c $(OUTPUT_OPTION)


bliss/bli-semantics.o: $(blisrc)/bli-semantics.c  $(BLI_NEW_UTIL_H)
bliss/bli-decl.o: $(blisrc)/bli-decl.c  $(BLI_NEW_UTIL_H)
bliss/bli-typeck.o: $(blisrc)/bli-typeck.c  $(BLI_NEW_UTIL_H)
bliss/bli-common2.o: $(blisrc)/bli-common2.c  $(BLI_NEW_UTIL_H)
bliss/bli-common.o: $(blisrc)/bli-common.c  $(BLI_NEW_UTIL_H)
bliss/bli-lang.o: $(blisrc)/bli-lang.c  $(BLI_NEW_UTIL_H)
bliss/bli-convert.o: $(blisrc)/bli-convert.c  $(BLI_NEW_UTIL_H)
bliss/bli-format.o: $(blisrc)/bli-format.c  $(BLI_NEW_UTIL_H)
bliss/bli-errors.o: $(blisrc)/bli-errors.c  $(BLI_NEW_UTIL_H)
bliss/bli-opts.o: $(blisrc)/bli-opts.c  $(BLI_NEW_UTIL_H)

# generated files the files from lex and yacc are put into the source
# directory in case someone wants to build but does not have
# lex/yacc/autogen

$(blibld)/blilex.c: $(blisrc)/blilex.l
	$(LEX) $(LEXFLAGS) -o$(blibld)/blilex.c $(blisrc)/blilex.l

# -v for verbose .output file

$(INTL_TARGETS): 

# Build hooks:

bliss.all.build: bliss
bliss.all.cross: 
	_error_not_here_yet - havent even thought about it - it may even work

bliss.start.encap:
bliss.rest.encap: 

bliss.info:
bliss.dvi:

bliss.man:

#
# Install hooks:

# Nothing to do here.
bliss.install-normal: bliss.install.common

# Install 
.phony:bliss.install.common
.phony:bliss.install

bliss.install bliss.install.common bliss.install-common: bliss.install.common.done

bliss.install.common.done: installdirs bliss.done bliss.check.drivers.done
	echo `pwd`
	for name in $(BLI_EXES) $(BLI_LIBS); \
	do \
	   if [ -f $$name ] ; then \
	    name2="`echo \`basename $$name\` | sed -e '$(program_transform_name)' `"; \
	    rm $(bindir)/$$name2$(exeext) | true; \
	    echo $(INSTALL_PROGRAM) $$name$(exeext) $(bindir)/$$name2$(exeext); \
	    $(INSTALL_PROGRAM) $$name$(exeext) $(bindir)/$$name2$(exeext); \
	    chmod a+x $(bindir)/$$name2$(exeext); \
	  fi ; \
	done
	${STAMP} bliss.install.common.done

bliss.install-info:

bliss.install-man: 

bliss.uninstall:
	for name in $(BLI_EXES) $(BLI_LIBS) $(BLISS_TEST_DRIVERS); \
	do \
	  echo $$name; \
	  name2="`echo $$name | sed -e '$(program_transform_name)' `"; \
	  echo becomes $$name2; \
	  echo rm $(bindir)/$$name2$(exeext); \
	  rm $(bindir)/$$name2$(exeext) | true; \
	done
	-rm bliss.install.common.done

#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

bliss.mostlyclean: 
	for name in $(BLI_EXES) $(BLI_LIBS) $(BLISS_TEST_DRIVERS); \
	do \
	  echo deleting $$name; \
	  if [ -f bliss/$$name$(exeext) ] ; then \
	    rm -f bliss/$$name$(exeext); \
	  fi ; \
	done
	-rm -f bliss/*.o
	-rm bliss*.done


bliss.clean: bliss.mostlyclean

bliss.distclean: bliss.clean
	-rm -f bliss/config.status 
	-rm -f bliss/*.output

bliss.extraclean: bliss.distclean

bliss.maintainer-clean: bliss.extraclean
	for name in $(BLI_GENERATED); \
	do \
	  if [ -f $(blisrc)/$$name ] ; then \
             echo deleting $(blisrc)/$$name; \
	     rm -f $(blisrc)/$$name; \
	  fi ; \
	done


#
# Stage hooks:
# The main makefile has already created stage?/bliss.

bliss.stage1: stage1-start
	-mv bliss/*$(objext) stage1/bliss
bliss.stage2: stage2-start
	-mv bliss/*$(objext) stage2/bliss
bliss.stage3: stage3-start
	-mv bliss/*$(objext) stage3/bliss
bliss.stage4: stage4-start
	-mv bliss/*$(objext) stage4/bliss
#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
bliss.distdir:
	not here yet

# test hook
# the other languages are hard coded in the main makefile.in - that seems to be wrong 

lang_checks += check-bliss
check: bliss.check

TESTSUITEDIR = testsuite

# You have to do make install before running this
bliss.check: $(TESTSUITEDIR)/site.exp
	-mkdir testsuite/bliss 
	-rootme=`pwd`; export rootme; \
	srcdir=`cd ${srcdir}; pwd` ; export srcdir ; \
	cd testsuite; \
	EXPECT=${EXPECT} ; export EXPECT ; \
	TRANSFORM=$(program_transform_name); export TRANSFORM; \
	if [ -f $${rootme}/../expect/expect ] ; then  \
	   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; pwd` ; \
	   export TCL_LIBRARY ; fi ; \
	PATH=`cd ..;pwd`:`cd ..;pwd`/bliss:$$PATH; export PATH; \
	gcc_extras="-B`cd ..;pwd` -B`cd ..;pwd`/bliss"; export gcc_extras; \
	time nice $(RUNTEST) --tool bliss $(RUNTESTFLAGS)

#	PATH=$(bindir):$$PATH; export PATH; \

# copy the output files from the current test to source ie say the new results are OK
bliss.check.fix: force
	srcdir=`cd ${srcdir}; pwd` ; export srcdir ; 
	-cp testsuite/bliss/*.out* t
	-cp testsuite/bliss/*runpgm* t
	-rm -f t/*nofilename

bliss.wc: force
	-rm -R -f temp
	mkdir temp
	-cp ${srcdir}/bliss/* temp
	-cp ${srcdir}/testsuite/bliss/*.bli temp
	-rm -f temp/*~
	-rm -f temp/TAGS
	-rm -f temp/*.html
	-rm -f temp/*.output
	LC_ALL=C; export LC_ALL; wc temp/*.texi temp/[a-z]*.txt temp/[A-Z]*
	-rm -f temp/*.texi
	-LC_ALL=C; export LC_ALL; rm -f temp/[A-Z]*
	-rm -f temp/*.txt
	-(cd temp; echo rm -f `echo ${BLI_GENERATED}|sed -e s\"${srcdir}/bliss/\"\"g`)
	wc temp/*
	-rm -R -f temp

#

# Update the tags table for emacs find label (alt-.) function
TAGS: bliss.tags

.PHONY: bliss.tags

bliss.tags:

.PHONY: bliss.html

bliss.html:
	texi2html -verbose -menu -split_chapter -number -I $(blisrc) $(blisrc)/bliss.texi
	mv bliss*.html $(blisrc)
