module f1 (main=r)=
begin
!structure
!vector[i; n, unit, ext] =
![n*unit] 
!(vector + i*unit)<0,8*unit>;

routine prepredummy=
begin
external routine undecl;
own a;
a=17;
a<4,4>=10;
a<24,2>=3;
!69188<24,2>=3;
undecl(128,.a);
end;

routine predummy=3;

routine dummy2=
begin
!own def : vector[5];
own data;
data=1;
!data=def[3];
end;
own dd;
routine dummy=
begin
own def;
own xyz;
own abc;
def=1;
xyz=1;
abc=3;
xyz+1=2;
136000=3;
!.136000=3;
end;

routine zzzz=
begin
!own mybyte: byte;
!own myword: word;
external routine undecl;
!mybyte=4;
!myword=3333;
!mybyte=.myword;
!undecl(.mybyte,.myword);
!undecl(65535,1);
undecl(43,43);
end;

routine pppp(par1, par2)=
begin
external routine undecl;
own myown;
undecl(64,96);
undecl(par1, par2);
undecl(.par1,.par2);
!par2=3;
myown=par1<48,8>;
undecl(par1, .myown);
myown=(.par1)<0,8>;
undecl(par1, .myown);
undecl(64,97);
prepredummy();
end;

routine q=3;
routine r=
begin
external routine undecl;
own a,b,c,d;
undecl(a,b);
undecl(c,d);
undecl(4,0);

if b then dd=4;
undecl(4,1);
if b then dd=4;
undecl(4,2);
end;
routine s=
begin
external routine undecl;
external routine amalloc;
external routine zzzz;
own d,c;
zzzz();
pppp(1,2);
pppp(255,2);
undecl(dd,44);
undecl(c,.c);
c=amalloc();
undecl(c,.c);
undecl(d,.d);
d=2;
undecl(d,.d);
r();
d=3;
r();
undecl(d);
undecl(2,3);
undecl2();
end;
routine t=
begin
own e,f;
f=3;
while .f do begin
r();
undecl(9,f);
f=.f-1;
end;
return;
e=2;
end;
end
eludom

