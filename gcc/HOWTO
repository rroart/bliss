COMPILE/INSTALL/RUN:
unpack a gcc 3.3.2 distribution

put the bliss and bliss.cp directories in gcc (alongside cp ada etc)
(bliss is based on C routines, while bliss.cp is based on the C++ cp/ stuff)

make a separate build and build2 directory in the same directory as gcc-3.3.2.

in each, do a ../configure --enable-languages=bliss or bliss.cp (not both).
do a make bootstrap in each
(or just one of them)

next time, for quicker compile, do make quickstrap

resulting binary compilers are named different (gcc relative directory):
 language=bliss: bliss/bli1
   can only be used with bli1, and it makes only .s -files
   compile with (to make .s): bliss/bli1  bliss/f1.bli
   link with: ./xgcc -Bbliss -L. -g t.c bliss/f1.s -o t
   all-in-one: ./xgcc -Bbliss -L. -g t.c bliss/f2.bli -o t
 language=bliss.cp: bliss, bli1
   can be used with xgcc, and can make both .s and .o.
   the output is mangled, so use nm *.o when you are going to link

NOTE:
see generated .s and .rtl files
it is working just a little, and it need a lot of work
the bliss.cp based stuff is much less developed (will be removed some time)

EXAMPLE:
there are two files f1.bli and f2.bli
use gdb bliss/bli1 with set arg -dr f1.bli (bliss.cp needs simpler files)
useful compiler paramters:
-c,-L: usual ones
-B: for setting binary compiler searchpatch
-S: for making .s-files
-dr: for making rtl-files
-dy: for setting yydebug

TESTED ON:
Sparc/Solaris
FreeBSD (must compile and link in two stages, it seems)

FEATURES:
primary exps:
	blocks (unlabeled)
	structure references (ordinary)
	routine calls (ordinary)
	field references (bit)
	code comments (! ones)
computational exps:
	op exps
conditional exps:
	conditional (ifs)
	tested loop (while)
	return exp
blocks and decls:
	blocks (unlabeled)
	decls:
		routine (ordinary)
		require
		structure (ordinary)
attrs:
 	allocation unit
data decls:
	own
	local
	external
data structures:
	field refs (bit)
	structure (ordinary)
routines
	ordinary (with input only)
	external	
macros
	simple (really simple, one level) 	
	require

LIMITATIONS/INCOMPATIBILITIES:
(gcc limitations(?), will be like this for some time)
bit field refs must be done with constant pos and bits
shifting must be with constants
(will be improved soon)
structures has not yet default values, and one must use all access actuals.
module main=... has no function
bit field refs is without ext
if (and perhaps while) must be used with block
no unary plus/minus.

IN THE WORKS:
?

BUGS:
address+n semantics
signed/unsigned
and really lots more

QUESTIONS (for gcc developers):
BIT_FIELD_REFS with non-CONSTANT pos and bits, is that legal?
R/LSHIFT_EXPR with negatives? with variables?

TODO:
split this howto

IMPLEMENTATION ISSUES:
local, own etc:
we have a name_ which contains something, and name which is a address to it.

bit field references:
there are three possibilities, according to which context it is in.
thereby a new def BIT_FIELD_REFS.

structures:
are done some sort of macroish.
(structure decls)
for structure_size and structure_body we need two dummy functions,
because you need a function context for expressions.
the structure-name is at the head of the access_formal list
dummy functions are named -_  and -__.
grokfield stuff is not used, and will be removed sometime.
the parm_first_to_last puts structure-name at the back (originally it was
first, but because it has chains it would then be copied, and a local
variable would then get no rtl-code (->compiler crash)).
the structure-name last may lead to some vulnerability with regard to
substitution, but that will be fixed later.
we make ourselves a STRUCTURE_TYPE and put body, size and formals there. 
(structure attrs)
basically a lot of copying, substituting and folding, and
it gets put into a STRUCTURE_STUFF temporary thingie.
(decl attr list)
checks is there is a STRUCTURE, and makes a STRUCTURE_ATTR for the
declaration, and an array for the contents (4x too big yet).
(ordinary structure ref)
a STRUCTURE_ATTR is found, and the final copies and substitutions are made.

NEWS:
0.003:
mainly macros and require

0.002:
mainly structure

before:
misc basic stuff
