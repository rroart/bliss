COMPILE/INSTALL/RUN:
you might need flex 2.5.4 (have had problems with 2.5.31)

unpack a gcc 3.4.3 distribution

put the bliss directories in gcc (alongside cp ada etc)
by something like ln -s gcc-3.4.3 bliss and untar it right
(bliss is based on C routines)

make a separate build directory in the same directory as gcc-3.4.3.

in each, do a ../configure --enable-languages=bliss.
do a make bootstrap in it

if necessary, next time, for quicker compile, do make quickstrap

resulting binary compilers are named different (gcc relative directory):
 language=bliss: bli1
   can only be used with bli1, and it makes only .s -files
   compile with (to make .s): bliss/bli1  bliss/f1.bli
	example files are in testsuite
   link with: ./xgcc -Bbliss -L. f1.s -o t
   all-in-one: ./xgcc -Bbliss -L. f2.bli -o t

NOTE:
see generated .s and .rtl files
it is working just a little, and it need a lot of work

EXAMPLE:
use gdb bliss/bli1 with set arg -dr f1.bli
useful compiler paramters:
-c,-L: usual ones
-B: for setting binary compiler searchpatch
-S: for making .s-files
-dr: for making rtl-files
-dy: for setting yydebug

TESTED ON:
Sparc/Solaris
FreeBSD (must compile and link in two stages, it seems)

FEATURES:
primary exps:
	blocks (unlabeled and labeled)
	structure references (ordinary)
	routine calls (ordinary)
	field references (bit)
	code comments (! ones)
	numeric literals
	string literals
	PLIT (simple)
computational exps:
	op exps
conditional exps:
	conditional (ifs)
	tested loop (pre/post, while/until)
	indexed loop (incr)
	return exp
blocks and decls:
	blocks (unlabeled and labeled)
	decls:
		routine (ordinary)
		require
		structure (ordinary)
attrs:
 	allocation unit
data decls:
	own
	local
	external
data structures:
	field refs (bit)
	structure (ordinary)
routines
	ordinary (with input only)
	external	
macros
	simple (really simple, one level) 	
	require

LIMITATIONS/INCOMPATIBILITIES:
(gcc limitations(?), will be like this for some time)
bit field refs must be done with constant pos and bits
shifting must be with constants
(will be improved soon)
structures has not yet default values, and one must use all access actuals.
module main=... has no function
bit field refs is without ext
if (and perhaps while) must be used with block
no unary plus/minus.

IN THE WORKS:
?

BUGS:
address+n semantics
signed/unsigned
and really lots more

QUESTIONS (for gcc developers):
BIT_FIELD_REFS with non-CONSTANT pos and bits, is that legal?
R/LSHIFT_EXPR with negatives? with variables?

TODO:
split this howto

IMPLEMENTATION ISSUES:
addressing:
previously,
we have a name_ which contains something, and name which is a address to it.
now,
we just use name, which is done ADDR_EXPR on, and it is dereferenced
if it is an lval.

bit field references:
there are three possibilities, according to which context it is in.
action on what to do with it are delayed.
thereby a new def BIT_FIELD_REFS.
In the 'o' part we add the address to the offset into it.
In the 'f' part we might dereference the address if needed
and build a bit_field_ref on it.

structures:
are done some sort of macroish.
(structure decls)
if this is used with the new pointer/address implementation, do not
take the ADDR_EXPR.
for structure_size and structure_body we need two dummy functions,
because you need a function context for expressions.
The T_NAME is pushparm-ed because it will be used to accessing itself.
the structure-name is at the head of the access_formal list
dummy functions are named -_  and -__.
One (-__) gets the to be used with itself and the access_actual.
The other (-_) will be used with the alloc_actuals.
With access-__ start_function is done as usual, and the current_decl is saved in afun.
The two pushlevel are new to 3.4.2 implementation, because something
changed you need not one but two to separate the two parameter lists.
(Before that no pushlevel was used).
Also needed(?) with 3.4.2 a new pushlevel before the next start_function.
The alloc -_ start_function is now done in the usual way.
The body is structure_size, and then it finishes off.
Then we reset to afun (still needed? check).
The structure_body is its body.
Then we finish off and pops a lot.
!grokfield stuff is not used, and will be removed sometime.
Grokfield it is still needed, it seems.
We do not use actual fields, just borrows the defs.
(Not sure) The next we do is concatenate the to parameter lists.
the parm_first_to_last puts structure-name at the back (originally it was
first, but because it has chains it would then be copied, and a local
variable would then get no rtl-code (->compiler crash)).
Next we call a modified c routine start_structure, with our name.
Start_structure makes a tag too.
At last we call a (modified) finish structure which inserts our
beautiful comp2 structure tree.
A lot of TREE-macros will be needed to access the contents.

(structure attribute)
If the structure name is used as an attribute, we get referenced the tag
and gets the structure with comp2 back, and extracting them.
We use copies because something will be done to them.
Then we substitute the two bodies with what is actually used now.
Then we return the structure attribute.

(local, own with structure attribute)
When we get a local, own or such with a structure attribute, we basically
have to allocate space of the right size.
With the old address/pointer implementation, this was done by making an array.
With the new implementation array did not work well with bit field refs,
so instead a declaration of an int with some bigger size was done.
Also, the variable is marked with the structure attribute.

(structure reference)
The variable name is tagged with the structure attribute.
We just extract the trees and do substitution.

(old description, cut and paste them later)
the structure-name last may lead to some vulnerability with regard to
substitution, but that will be fixed later.
we make ourselves a STRUCTURE_TYPE and put body, size and formals there. 
(structure attrs)
basically a lot of copying, substituting and folding, and
it gets put into a STRUCTURE_STUFF temporary thingie.
(decl attr list)
checks is there is a STRUCTURE, and makes a STRUCTURE_ATTR for the
declaration, and an array for the contents (4x too big yet).
(ordinary structure ref)
a STRUCTURE_ATTR is found, and the final copies and substitutions are made.

if_then_else:
Here too, c_expand_expr_stmt is used in case of non ( ) parts?

routine calls:
With the new implementation, we do not do ADDR_EXPR.

loops:
straigh forward, but remember that c_expand_expr_stmt($3) for post tested
loops needs it in case there is no block.

TREE_SIDEEFFECTS is used so in some cases we get code generation at all.

NEWS:

0.200
x86_64:
New support
Bugs fixed:
i386:
Some unwanted alignment (TPAMAC) just disappeared with long_int change.
Lexical digits got changed in sign change area
(0x80000001 instead of 0x80000000. Also changed from 32-bit to 64-bit.) 
Address of descriptor string was taken as 64-bit, which destroyed edx.

0.114
Bugs fixed:
Nested select could get loop with otherwise.

0.113
Sign extension for bit fields (but structure default bit field ext remain).

Bugs fixed:
Wrong default sign extension for decls.

0.112
Bugs fixed:
Calling routine "variable" did not dereference.

0.111
New minimal signal routine.
More proper uplit support (not yet counted plit).

Bugs fixed:
%allocation did not work properly with mixed casing.
Signal collided with Unix signal, it now calls new minimal routine instead.
One lexical function lost some content, another one misinterpreted it.
Plit strings generated wrongly.

0.110
Novalue, external_name, alignment attribute.
Linking with argument count.
Compiler qualifier -fminimum-actuals= which can circumvent non-counted 
argument problems. If less fill with 0s.
Nullparameter implementation change; can also use counted arguments or
it must be used with -fminimum-actuals=.
Implicit declarations.
Psect support.
Forward declaration.

Bugs fixed:
Was one left in bit field ref (one indirect was removed).
Extra parenthesis stripping caused problems.
Remaining was lost sometimes.
Inconsistent return from strstrendbal.
Remove some overflows.
%string did not return right sometimes.
%identical to also parse contents. 
String was not used as int with assignments.
Own not properly done as own.
Undeclare not handling list.
Have empty unused macro actuals in simple macro.
Record_type had wrong type_mode, and this lead to local stack problems.

0.100
Probably more proper support for builtin ap.
Less for builtin nullparamater.
Proper initial attribute support.
General structure reference support.
Handle allocation attribute again.
Bliss req-files with Linux support (may work on other 32-bit LE Unix).
Sign support.
Some undeclare support (in literal).
Bliss pointer arithmetic support (was C before).
And of course misc bugs fixed:
Preset needed sorted constructors.
Select was missing a label and could not be nested.
More correct handling of external.
Maybe better handling for builtin.
Ch$allocation as ctce.
Hh$alloaction computing error.
Labeled block must return value.
Missing main.
Proper global non-global routine support.
Pissing string_cst for plit.
Signed limit problem with %h, %o, %h.
No good use of ref structure.
Giving . indirect ref with .n<>.
Not got pointer.
Old literal and bind implementation bugged and had to be changed.
Allocation unit returned size in bits, should be bytes.
Some places missed folds.
Proper structure sizes now set. 

0.012
String ch$ routines.
Better initial attribute handling.
Conditional macro checks alloc and formal params.
New map support.
And of course misc bugs fixed.

0.011
Better quote handling
Misc cleanup and making routines of duplicated code
Some other stuff

0.010
More proper macros
Lots of other stuff

0.005
Compiletime
Lexicals
Bind

0.004
Strings and numeric literals
PLIT
More loop conditionals, and exitloop
Labeled blocks and leave
Return with value
New basic addressing implementation
New and better(?) block value implementation

0.003:
mainly macros and require

0.002:
mainly structure

before:
misc basic stuff
